Assignment - ERC721
Token Standards
Assignment Contract:
https://github.com/filipmartinsson/solidity-201/blob/master/ERC721_assignment/kittycontract1.sol

 

Study the ERC721 contract provided in this lecture and answer the following questions. Post your answer in this forum topic:

1. What is the time complexity of creating new cats? (constant or linear w nr of cats).

2. What is the time complexity of the getAllCatsFor function? (constant or linear w nr of cats).

3. How could the storage design be changed to make the getAllCats function constant? Implement your idea. Then discuss the benefits and drawbacks of your implementation and post everything in the forum.


Post your answers are your code in this forum topic:

https://forum.ivanontech.com/t/assignment-erc721/33588


MY ANSWERS:

Constant amount of time complexity (and therefore gas) to create a new cat.
This is because there are only direct access into mappings and pushing new cat
to an array. There is no looping that depends upon the number of cats already
created.

The getAllCatsFor function has a linearly increasing amount of operations
because the code needs to iterate through the whole array of cats. The more
cats that exist the bigger this array and the more iterations are required to
check each cat to see if it belongs to the specified owner (so linera time complexity).
If this view function was called externally, the gas cost would also increase linearly
with the number of cats.

The getAllCatsFor function could have its time complexity reduced by introducing
a new mapping that links an address to an array of owned cat ids. In this way, the
function would not have to iterate through the array of all cats and its time complexity
(and if external called, the gas cost) would become constant. If the number of cats in
existence is very large this function would become inefficient.

See KittyContract2 for my solution. Where I’ve introduced a new mapping:
mapping (address => uint256[]) ownersCats;
And then maintained this mapping in the _transfer function. This allows my
amended version of the getAllCatsFor function to simply return the array of
cat ids (by a simple lookup in the ownersCats mapping).
The disadvantage is that the _transfer function, upon a cat being transferred
from an existing owner to a new owner, now needs to loop through the array of the
transferor’s cats to remove the tokenId from their array of owned cats (in ownersCats
mapping). It does this by calling a new function _removeCat. Whilst this makes the
_transfer function execution somewhat non-constant, it only needs to iterate
through the previous owner’s cats - so the execution cost is will linearly increase
but this will be based on the number of cats owned by the transferor (not the total
number of cats). However, this is not a view function and so the gas prices would be
higher for all users of the _transfer function - which may be more of a negative than the
benefit we gained with the getAllCatsFor function!!

I’m now thinking there could be an even better way by using a double mapping…
I will think about this further! Hrmmm…

In any case, my solution code is here, in the KittyContract2.sol file:
https://github.com/msuscens/Smart-Contract-Programming-201/tree/master/ERC721%20Assignment

