Project: Building a Decentralised DEX

Assignment
Build a DEX where a user can deposit ETH and ERC20 tokens.  The tokens can
be bought using ETH (but not other ERC-20 tokens).  Users should be able to
create both buy orders and sell orders, which will be stored in an on-chain
order book.  Users will also be able to place market orders (where they will
buy from the best offer in the the order book).


______________________________________________________________________________

My Project Developement Steps & Notes (as I implement the project):

1. Write a basic Wallet contract with functions:
    addToken,
    deposit, and
    withdraw

2. Write a mock token contract (LinkMock in tokens.sol) that will be used for
Wallet testing purposes.  (Will add other mock tokens later to tokens.sol)

3. Add migration scripts for the Wallet and LinkMock contracts:
    $ truffle develop
    truffle(develop)> migrate
    truffle(develop)> let wallet = await Wallet.deployed()
    truffle(develop)> let link = await LinkMock.deployed()
    truffle(develop)> link.balanceOf(accounts[0])  // To check that we have 1000 LINK
    truffle(develop)> wallet.addToken(web3.utils.fromUtf8("LINK"),link.address )
    // Note In truffle use Web3.utils.fromUtf8(<string>) to convert to btyes32 from string
    // (in solidity we could simply convert by: byttes32("LINK");
    // link.address is obtained from Truffle

4. Add LINK token as a Wallet known token (and check that it has been added) 
    truffle(develop)> wallet.addToken(web3.utils.fromUtf8("LINK"),link.address)
    truffle(develop)> wallet.tokenList(0)                               //To check the token ticker has been added
    truffle(develop)> wallet.tokenMapping(web3.utils.fromUtf8("LINK"))  //Get ticker and token's contract address
    truffle(develop)> link.address                                      //Check our stored token's address is the
                                                                        //actual LINK contract address
5. Check that Wallet deposit function works - first check that wallet can't transfer funds (from LINK contract)
without first been given approval to transfer owner's funds:
    truffle(develop)> wallet.deposit(100, web3.utils.fromUtf8("LINK"))
    Error: "revert': 'ERC20: transfer amount exceeds allowance'

6. Give the Wallet approval and then try again to transfer LINK tokens:
    truffle(develop)> link.approve(wallet.address, 500)
    truffle(develop)> wallet.deposit(100, web3.utils.fromUtf8("LINK"))
    truffle(develop)> wallet.balances(accounts[0], web3.utils.fromUtf8("LINK"))

7.  Extend tokens migrations (2_tokens_migration.js) to automate above testing,
    migrate again and check the wallet balance for LINK token:
    const LinkMock = artifacts.require("LinkMock")
    const Wallet = artifacts.require("Wallet")

    module.exports = async function (deployer, network, accounts) {
        await deployer.deploy(LinkMock)
        let wallet = await Wallet.deployed()
        let link = await LinkMock.deployed()
        await link.approve(wallet.address, 500)
        await wallet.addToken(web3.utils.fromUtf8("LINK"),link.address)
        await wallet.deposit(100, web3.utils.fromUtf8("LINK"))
        const linkBalance =
            await wallet.balances(accounts[0], web3.utils.fromUtf8("LINK"))
        console.log("LINK balance: "+linkBalance)
    }

    truffle(develop)> migrate --reset
    LINK balance: 100

8. Create basic DEX contract structure (Dex.sol), with a getOrderBook function
(not yet tested).

9. Rename the wallet migration file and contents for use with Dex
(e.g. 2_wallet_migration.js -> 2_dex_migration.js)  And likewise update the
3_token_migration.js file to use the Dex instead of the Wallet.

10. Add wallet test scripts to test the dex/wallet (walletTest.js), specically
writing tests for wallet functions addToken(), deposit() and withdrawal()

11. Add DEX test scripts (dexTest.js), specically in preparation for writting
createLimitOrder function. Ie. TDD approach of writing tests before function
implementation.
(Note this is my 'Limit Order Test Assignment' that I posted into the forum: 
https://forum.ivanontech.com/t/assignment-limit-order-test/33821/57 )

12. Add Dex CreatLimitOrder function implementation (using TDD approach).
This uses a bubble sort but only requires one pass through the array since
the new order is added to the end of the previously sorted array.
(Note there are more efficient sort algorithms but sorting the updated
order book by implementing a bubble sort was the assignment task.)

13. Write plan for market order tests (i.e. a list of tests to be develped),
in new test file: dexMarketOrderTest.js (Also rename walletTest.js to
dexWalletTest.js)

14. Refactor, including changes for Solidity v8:
i) Remove safeMath - solidity now has overflow/underflow safe-guards (reverts)
ii) Remove 'pragma experimental ABIEncoderV2;' as 'pragma abicoder v2;' is now
used by default
iii) Update migrations file to ensure it uses ^0.8.0
iv) Add "// SPDX-License-Identifier: MIT" comment to .sol files (To eliminate
licencing warnings)

15. Write tests for Dex's createMarketOrder function (yet to be implemented).
(ie. TDD approach, with tests in ./tests/dexMarketOrderTests.js)







